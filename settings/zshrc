[ -f ~/.anyshrc ] && source ~/.anyshrc

autoload -U compinit; compinit

setopt AUTO_CD

autoload -U colors; colors
export LSCOLORS=DxGxcxdxCxegedabagacad

# git info
autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:*' formats "*%b"
zstyle ':vcs_info:*' actionformats '*%b|%a'
precmd () { vcs_info }

# funny prompt
PROMPT="
%(?.%{$fg[green]%}.%{$fg[cyan]%}){\__/} %{$fg[yellow]%}%(1j.[%j] .)%{${fg[yellow]}%}%~ %{${fg[cyan]}%}\$vcs_info_msg_0_%{${reset_color}%} %n@%m
%(?.%{$fg[green]%}.%{$fg[cyan]%})%(?!(*'-')o!(*;-;%)?) <%{${reset_color}%} "

PROMPT2='[%n]> '

# cd history
function chpwd() {
	_zsh_jump_add_log
	ls -la
}

CDLOG=$HOME/.cache/cd.log

function _zsh_jump_add_log() {
	local i=0
	cat $CDLOG | while read line; do
		(( i++ ))
		if [ i = 200 ]; then
			sed -i -e "500,500d" $CDLOG
		elif [ "$line" = "$PWD" ]; then
			sed -i -e "${i},${i}d" $CDLOG
		fi
	done
	echo "$PWD" >> $CDLOG
}

function _zsh_jump() {
	# 入力されている文字列を削除
	zle kill-whole-line

	local dir
	if [ $# = 0 ]; then
		dir=$(tac $CDLOG | fzf +s) && cd "$dir"
	elif [ $# = 1 ]; then
		cd $1
	else
		echo "_zsh_jump: too many arguments"
	fi

	# 1行入力させる
	zle .accept-line
}

__zsh_jump() {
	_files -/
}

compdef __zsh_jump _zsh_jump

[ -e $CDLOG ] || touch $CDLOG
[ -e $CDLOG ] && cd `tail -1 $CDLOG`

[ -f ~/.zshrc.local ] && source ~/.zshrc.local
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# key bindings
function _zsh_up_cd() {
	# 入力されている文字列を変数$BUFに代入
	local BUF=${BUFFER}

	# 入力されている文字列を削除
	zle kill-whole-line

	# cd ../を実行
	\cd ..

	# 1行入力させる
	zle .accept-line

	# 入力されていた文字列を再度入力する
	if [ ! ${#BUF} -eq 0 ];then
		zle -U ${BUF}
	fi
}

# functionをキーバインドで利用できるよう読み込ませる
zle -N _zsh_up_cd
zle -N _zsh_jump

# キーバインドの設定
bindkey '^U' _zsh_up_cd
bindkey '^T' _zsh_jump
