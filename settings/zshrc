[ -f ~/.bashrc ] && source ~/.bashrc
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# ========================================
# PATH
# ========================================
[ -d /home/linuxbrew ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
[ -d /opt/homebrew ] && eval "$(/opt/homebrew/bin/brew shellenv)"
[ -d /opt/homebrew/opt/llvm/bin ] && export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
[ -d ~/lima ] && export LIMA_HOME=~/lima

if [ -d "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk" ]; then
	source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
	source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'
fi

export PATH=$PATH:~/go/bin

if type rbenv > /dev/null 2>&1
then
	eval "$(rbenv init -)"
fi

# ========================================
# ENV
# ========================================
export TERM=xterm-256color
export EDITOR=vim
export LANG=ja_JP.utf8

# ========================================
# Aliases
# ========================================
alias ll='ls -lah'
alias e='vim'
alias d='docker'
alias mu='multipass'
alias n='fg'
alias m='make'
alias g='lazygit'
alias gs='git status'
alias gw='git switch'
alias i='git status -sb'
alias ga='git add'
alias gc='git commit'
alias gd='git diff'
alias gdd="git diff --color-words --word-diff-regex='\\w+|[^[:space:]]'"
alias gf='git fetch -p'
alias gm='git merge --no-ff'
alias gp='git pull -p'
alias gl='git log'
alias gb='git branch'
alias q,="q -H -d,"
alias sc='systemctl'
alias ssc='sudo systemctl'
alias cf='wrangler'

case "${OSTYPE}" in
	darwin*)
		alias tac="tail -r"
		alias ls="ls -G"
		;;
	linux*)
		alias ls="ls --color"
		alias ll="ls -la --color"
		;;
esac

# ========================================
# Prompt
# ========================================
bindkey -e

autoload -U compinit; compinit

setopt AUTO_CD

autoload -U colors; colors
export LSCOLORS=DxGxcxdxCxegedabagacad

autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:*' formats "*%b"
zstyle ':vcs_info:*' actionformats '*%b|%a'
precmd () { vcs_info }

PROMPT="
%(?.%{$fg[green]%}.%{$fg[cyan]%}){\__/} %{$fg[yellow]%}%(1j.[%j] .)%{${fg[yellow]}%}%~ %{${fg[cyan]}%}\$vcs_info_msg_0_%{${reset_color}%} %n@%m
%(?.%{$fg[green]%}.%{$fg[cyan]%})%(?!(*'-')o!(*;-;%)?) <%{${reset_color}%} "

PROMPT2='[%n]> '


# ========================================
# Functions
# ========================================

BOOKMARKS_FILE="$HOME/.bookmarks"

# Add pwd to bookmark
a() {
	local temp new
	temp=$(mktemp)
	new=$(pwd | sed "s#^$HOME#~#")
	cat $BOOKMARKS_FILE <(pwd | sed "s#^$HOME#~#") | sort | uniq > $temp
	mv $temp $BOOKMARKS_FILE
	echo "Added: " $new
}

# Show bookmarks
b() {
	echo "Bookmarks:" 1>&2
	cat $BOOKMARKS_FILE
}

# Select bookmark to cd
c() {
	local dir
	dir=$(cat $BOOKMARKS_FILE | gof) && cd $(echo $dir | sed "s#^~#$HOME#")
}

# cd history
function chpwd() {
	_zsh_jump_add_log
	ls -lah
}

CDLOG=$HOME/.cache/cd.log

function _zsh_jump_add_log() {
	local i=0
	cat $CDLOG | while read line; do
		(( i++ ))
		if [ i = 200 ]; then
			sed -i -e "500,500d" $CDLOG
		elif [ "$line" = "$PWD" ]; then
			sed -i -e "${i},${i}d" $CDLOG
		fi
	done
	echo "$PWD" >> $CDLOG
}

function _zsh_jump() {
	# 入力されている文字列を削除
	zle kill-whole-line

	local dir
	if [ $# = 0 ]; then
		dir=$(tac $CDLOG <(cat ~/.cache/vim/viminfo.txt | grep -e "^-" | cut -d' ' -f7 | sort | uniq | xargs -n1 dirname) | gof -f) && cd "$dir"
	elif [ $# = 1 ]; then
		cd $1
	else
		echo "_zsh_jump: too many arguments"
	fi

	# 1行入力させる
	zle .accept-line
}

__zsh_jump() {
	_files -/
}

compdef __zsh_jump _zsh_jump

[ -e $CDLOG ] || touch $CDLOG
[ -e $CDLOG ] && cd `tail -1 $CDLOG`

# up
function _zsh_up_cd() {
	# 入力されている文字列を変数$BUFに代入
	local BUF=${BUFFER}

	# 入力されている文字列を削除
	zle kill-whole-line

	# cd ../を実行
	\cd ..

	# 1行入力させる
	zle .accept-line

	# 入力されていた文字列を再度入力する
	if [ ! ${#BUF} -eq 0 ];then
		zle -U ${BUF}
	fi
}

# ghq
function _zsh_ghq_gof() {
	local repo=$(ghq list | gof -f)
	if [ -n "$repo" ]; then
		repo=$(ghq list --full-path --exact $repo)
		BUFFER="cd ${repo}"
		zle accept-line
	fi
	zle clear-screen
}

# functionをキーバインドで利用できるよう読み込ませる
zle -N _zsh_up_cd
zle -N _zsh_jump
zle -N _zsh_ghq_gof

# キーバインドの設定
bindkey '^U' _zsh_up_cd
bindkey '^T' _zsh_jump
bindkey '^X' _zsh_ghq_gof
