" 自分の開発スタイルに最適化されたvimの設定
" 一時的にサーバーに入る場合はsshrcでvimrc_minを持っていく
set runtimepath+=$HOME

syntax on

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,cp932,euc-jp

set backup
set backupdir=~/.cache/vim/
set backupext=.bak
set undofile
set undodir=~/.cache/vim/
set viminfo+=n~/.cache/vim/viminfo.txt
set noswapfile
set scl=no
set nowrap
set autoread
set autowrite
set backupcopy=yes
set showcmd
set showmatch
set matchtime=1
set tabstop=2
set shiftwidth=2
set hlsearch
set incsearch
set ignorecase
set smartcase
set smartindent
set scrolloff=10
set backspace=eol,indent,start
set autochdir
set title

if &term =~ 'xterm' || &term == 'win32'
	let &t_SI = "\e[5 q"
	let &t_EI = "\e[0 q"
else
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
inoremap <S-F5> <nop>
inoremap <S-F6> <nop>

noremap h h
noremap t gj
noremap r gk
noremap s l

noremap ( N
noremap ) n

" quick mark
noremap m mM
noremap k `M

nnoremap e v
nnoremap n V
nnoremap E <C-v>

map Y y$

nnoremap + <C-a>
nnoremap - <C-x>

noremap <BS> "_xh
noremap x "_s

nnoremap <C-h> :cprevious<CR>
nnoremap <C-s> :cnext<CR>
nnoremap <C-q> :cclose<CR>
nnoremap <C-l> zt

" navigate windows
nnoremap <Left>  <C-w>h
nnoremap <Down>  <C-w>j
nnoremap <Up>    <C-w>k
nnoremap <Right> <C-w>l
nnoremap <C-x>   <C-w>x

" save
nnoremap j :w<CR>
" close
nnoremap v :q<CR>

iabbrev ret return

" load advanced settings
" ~/.vimとplug.vimが配置されている場合のみ読み込む
if isdirectory(expand('~/.vim')) && !empty(glob('~/.vim/autoload/plug.vim'))

	if has('win32')
		source ~/.vim/autoload/plug.vim
	endif

	call plug#begin('~/.vim/plugged')

	" ------------------------------------------------------------
	"  カラースキーム
	" ------------------------------------------------------------
	Plug 'cocopon/iceberg.vim'
	Plug 'koron/vim-monochromenote'

	" ------------------------------------------------------------
	"  オペレータ、テキスト操作
	" ------------------------------------------------------------
	Plug 'easymotion/vim-easymotion'
	Plug 'haya14busa/vim-edgemotion'
	Plug 'haya14busa/vim-asterisk'

	Plug 'hrsh7th/vim-searchx'

	Plug 'kana/vim-operator-user'
	Plug 'osyo-manga/vim-operator-stay-cursor'

	Plug 'mattn/vim-lexiv'

	Plug 'junegunn/vim-easy-align'

	Plug 'kana/vim-textobj-user'
	Plug 'sgur/vim-textobj-parameter'

	" Comment out
	Plug 'tyru/caw.vim'

	" Auto nohlsearch
	Plug 'romainl/vim-cool'

	let g:operator_sandwich_no_default_key_mappings = 1
	let g:sandwich_no_default_key_mappings = 1
	Plug 'machakann/vim-sandwich'

	" template
	Plug 'mattn/vim-sonictemplate'
	let g:sonictemplate_vim_template_dir = [ '~/dotfiles/settings/sonictemplate' ]

	" ------------------------------------------------------------
	"  ファイラ / セレクタ
	" ------------------------------------------------------------
	Plug 'ctrlpvim/ctrlp.vim'
	let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

	Plug 'cocopon/vaffle.vim'
	Plug 'tacahiroy/ctrlp-funky'
	Plug 'liuchengxu/vista.vim'

	" ------------------------------------------------------------
	"  パッシブ拡張
	" ------------------------------------------------------------
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
	set ttimeoutlen=0
	let g:airline_theme = 'powerlineish'

	" ------------------------------------------------------------
	"  言語
	" ------------------------------------------------------------
	" Language Server
	Plug 'prabirshrestha/vim-lsp'
	Plug 'mattn/vim-lsp-settings'
	Plug 'prabirshrestha/asyncomplete.vim'
	Plug 'prabirshrestha/asyncomplete-lsp.vim'
	let g:lsp_async_completion = 1
	let g:lsp_document_code_action_signs_enabled = 0

	" QuickRun
	Plug 'thinca/vim-quickrun'

	" Testing
	Plug 'vim-test/vim-test'

	" ------------------------------------------------------------
	"  小回り
	" ------------------------------------------------------------
	"  日本語ヘルプ
	Plug 'vim-jp/vimdoc-ja'

	" Smooth scrolling
	Plug 'yuttie/comfortable-motion.vim'

	" 使い捨てファイル
	Plug 'Shougo/junkfile.vim'

	" Gist
	Plug 'mattn/webapi-vim'
	Plug 'mattn/gist-vim'

	call plug#end()

	set background=dark
	colorscheme iceberg
	set termguicolors

	let g:EasyMotion_keys = 'aenihtskmyopcrlud'
	let g:EasyMotion_smartcase = 1
	let g:EasyMotion_do_shade = 0
	let g:EasyMotion_startofline = 0

	let g:searchx = {}

	" Auto jump if the recent input matches to any marker.
	let g:searchx.auto_accept = v:true

	" The scrolloff value for moving to next/prev.
	let g:searchx.scrolloff = &scrolloff

	" To enable auto nohlsearch after cursor is moved
	let g:searchx.nohlsearch = {}
	let g:searchx.nohlsearch.jump = v:true
	let g:searchx.markers = split('HTSCRLMDBGAENIYUKOP', '.\zs')

	let g:vaffle_show_hidden_files = 1
	let g:vaffle_use_default_mappings = 0
	" let g:vaffle_auto_cd = 1

	let g:airline_powerline_fonts = 1
	set laststatus=2

	let g:lsp_diagnostics_float_cursor = 1

	let g:quickrun_config = {}
	let g:quickrun_config.go = {'command': 'go', 'exec': ['%c run .']}

	let g:sandwich_no_default_key_mappings = 1
	let g:operator_sandwich_no_default_key_mappings = 1

	let test#strategy = "vimterminal"

	" Language Server
	nmap ,n <plug>(lsp-rename)
	nmap ,h <plug>(lsp-hover)
	nmap ,s <plug>(lsp-document-symbol)
	nmap ,d <plug>(lsp-definition)
	nmap ,i <plug>(lsp-implementation)
	nmap ,D <plug>(lsp-type-definition)
	nmap ,f :CtrlPFunky<CR>
	nmap ,c <plug>(lsp-code-lens)
	nnoremap ,q :LspStopServer<CR>
	nmap <C-n> <plug>(lsp-next-diagnostic)
	nmap <C-p> <plug>(lsp-previous-diagnostic)o

	" Testing
	nnoremap ,t :TestNearest<CR>
	nnoremap ,T :TestFile<CR>

	" QuickRun
	nnoremap ,r :QuickRun -outputter/buffer/split ":botright 8sp"<CR>
	nnoremap ,a :QuickRun -args

	" JunkFile
	nnoremap ,j :JunkfileOpen

	" Basic motions by easymotion
	map R <Plug>(edgemotion-k)
	map T <Plug>(edgemotion-j)
	map ? <Plug>(easymotion-overwin-f2)
	map l <Plug>(easymotion-bd-fl)
	map * <Plug>(asterisk-z*)
	map # <Plug>(asterisk-z#)

	" Searchx
	nnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
	nnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
	xnoremap ? <Cmd>call searchx#start({ 'dir': 0 })<CR>
	xnoremap / <Cmd>call searchx#start({ 'dir': 1 })<CR>
	cnoremap ; <Cmd>call searchx#select()<CR>

	" CtrlP
	nnoremap <Space><Space> :CtrlP<CR>
	nnoremap <Space>t :CtrlPMRU<CR>
	nnoremap <Space>c :CtrlPCurFile<CR>
	nnoremap <Space>q :CtrlPQuickfix<CR>

	nnoremap <Space>s :Vista vim_lsp<CR>

	" 補完もろもろ
	set completeopt=menuone
	inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

	" Sandwich operations
	map ;a <Plug>(operator-sandwich-add)
	map ;d <Plug>(operator-sandwich-delete)<Plug>(textobj-sandwich-auto-a)
	map ;c <Plug>(operator-sandwich-replace)<Plug>(textobj-sandwich-auto-a)

	" EasyAlign
	xmap ga <Plug>(EasyAlign)
	nmap ga <Plug>(EasyAlign)

	" Vaffle
	nnoremap <Space>l :<C-u>Vaffle<CR>

	" Vaffle
	augroup vimrc_vaffle
		autocmd!
		au FileType vaffle nnoremap <buffer> . /
		au FileType vaffle nmap <buffer> ~ <Plug>(vaffle-open-home)
		au FileType vaffle nmap <buffer> h <Plug>(vaffle-open-parent)
		au FileType vaffle nmap <buffer> s <Plug>(vaffle-open-current)
		au FileType vaffle nmap <buffer> a <Plug>(vaffle-toggle-all)
		au FileType vaffle nmap <buffer> <Space> <Plug>(vaffle-toggle-current)
		au FileType vaffle vmap <buffer> <Space> <Plug>(vaffle-toggle-current)

		au FileType vaffle nmap <buffer> <CR> <Plug>(vaffle-open-selected)
		au FileType vaffle nmap <buffer> e <Plug>(vaffle-move-selected)
		au FileType vaffle nmap <buffer> d <Plug>(vaffle-delete-selected)
		au FileType vaffle nmap <buffer> n <Plug>(vaffle-rename-selected)
		au FileType vaffle nmap <buffer> q <Plug>(vaffle-quit)
		au FileType vaffle nmap <buffer> o <Plug>(vaffle-mkdir)
		au FileType vaffle nmap <buffer> i <Plug>(vaffle-new-file)
		au FileType vaffle nmap <buffer> R <Plug>(vaffle-refresh)
		au FileType vaffle nmap <buffer> x <Plug>(vaffle-fill-cmdline)
	augroup END

	" ============================================================
	"  FileTypeごとの設定
	" ============================================================
	" go
	augroup go
	au!
	au FileType go inoremap <C-e> err != nil {<CR>
	au FileType go noremap ,m :<C-u>!go mod tidy<CR>
	autocmd BufWritePre *.go  call execute('LspDocumentFormatSync') | call execute('LspCodeActionSync source.organizeImports')
	augroup END

endif
