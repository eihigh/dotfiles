" キーマップ戦略:
" 大前提として、デフォルト挙動を大きく変えすぎないようにする。
" LSP中心に g を注意深く上書きする。
" その他分類不能なプラグインの機能は <Space> で起動する。
" Ctrl キーは特殊なキーが多いのでなるべく避ける。

" ----------------------------------------
" 独自のキーレイアウトに合わせるためのマッピング
" ----------------------------------------

" 移動
nnoremap h h
nnoremap t gj
nnoremap r gk
nnoremap s l
xnoremap h h
xnoremap t gj
xnoremap r gk
xnoremap s l

" ビジュアル
nnoremap e v
nnoremap n V
nnoremap E <C-v>
xnoremap e v
xnoremap n V
xnoremap E <C-v>

" 検索
nnoremap ( N
nnoremap ) n
xnoremap ( N
xnoremap ) n

" IME切り替えで生じるゴミの無視
noremap! <S-F5> <nop>
noremap! <S-F6> <nop>

" ----------------------------------------
" 好みの挙動のカスタマイズ
" ----------------------------------------

" 最低限欲しい設定
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,euc-jp,cp932
set backspace=eol,indent,start

" その他の設定
set undofile
set undodir=~/.cache/vim/
set number
set signcolumn=number
set nowrap
set autoread
set autochdir
set tabstop=2
set shiftwidth=2
set hlsearch
set incsearch
set ignorecase
set smartcase
set smartindent
set ttimeoutlen=0

" yank 範囲
nnoremap Y y$

" 一文字削除でレジスタを消費しない
nnoremap <BS> "_xh
nnoremap x    "_s

" クイックマーク
nnoremap m mM
nnoremap k `M

" 保存/終了ショートカット
nnoremap j :w<CR>
nnoremap v :q<CR>

" nohlsearch
nnoremap <silent> <Esc> :<C-u>nohlsearch<CR>

" ウィンドウ分割
nnoremap \| :<C-u>vsplit<CR>
nnoremap -  :<C-u>split<CR>

" 矢印キーでウィンドウ移動
" <C-w> 連打でウィンドウ入れ替え
nnoremap <Left>     <C-w>h
nnoremap <Down>     <C-w>j
nnoremap <Up>       <C-w>k
nnoremap <Right>    <C-w>l
nnoremap <C-w><C-w> <C-w>x

" 補完ウィンドウ操作
" up/down では候補を選択しても即座に挿入されずCRで確定する必要があるので、
" C-n/p に置き換えて候補選択と同時に挿入されるようにする。
inoremap <silent> <expr> <Up>   pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <silent> <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <silent> <expr> <CR>   pumvisible() ? asyncomplete#close_popup() . "\<CR>" : "\<CR>"

" <Esc> でターミナルノーマルモードへ遷移
" 代わりに <C-w> 連打で <Esc> 入力
tnoremap <C-w><C-w> <Esc>
tnoremap <Esc>      <C-w>N

" z. でカーソル中央固定
set scrolloff=2
noremap <expr> z. &scrolloff == 99 ? ':setlocal scrolloff=2<CR>' : 'zz:setlocal scrolloff=99<CR>'

" 絶対に手放せない abbreviation
abbrev ret return

" NORMAL/INSERT でカーソル形状を変更
if &term =~ 'xterm' || &term == 'win32'
	let &t_SI = "\e[5 q"
	let &t_EI = "\e[2 q"
else
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" カーソル行強調表示
set cursorline
augroup vimrc
	autocmd!
	autocmd WinLeave * set nocursorline
	autocmd WinEnter * set cursorline
augroup END

" statusline
set statusline=\ %m%=%<%f\ 

" ----------------------------------------
" プラグイン
" ----------------------------------------

if empty(glob('~/.vim/autoload/plug.vim'))
	finish
endif

call plug#begin('~/.vim/plugged')

" カラースキーム
Plug 'chriskempson/base16-vim'
Plug 'cocopon/iceberg.vim'

" オペレータ / テキスト操作
Plug 'haya14busa/vim-easymotion'
Plug 'haya14busa/vim-edgemotion'

Plug 'kana/vim-textobj-user'
Plug 'sgur/vim-textobj-parameter'

Plug 'tyru/caw.vim'

Plug 'machakann/vim-sandwich'

" ファイラ / セレクタ
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'

Plug 'mattn/vim-molder'

" パッシブ拡張
Plug 'wellle/context.vim'

" 言語
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
" 補完ウィンドウを閉じたときの挙動がバグるので後で解決する
" Plug 'hrsh7th/vim-vsnip'
" Plug 'hrsh7th/vim-vsnip-integ'

" 小回り
Plug 'vim-jp/vimdoc-ja'

call plug#end()

" ----------------------------------------
" プラグインの設定
" ----------------------------------------

" カラースキーム
set background=dark
set termguicolors
colorscheme aomi-grayscale

" CtrlP
nmap <Space><Space> :<C-u>CtrlPMRU<CR>

" Language Server
let g:lsp_async_completion = 1
let g:lsp_diagnostics_highlights_enabled = 1
let g:lsp_diagnostics_highlights_delay = 100
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
nmap gr <plug>(lsp-rename)
nmap gh <plug>(lsp-hover)
" nmap gs <plug>(lsp-document-symbol)
nmap gd <plug>(lsp-definition)
nmap gD <plug>(lsp-type-definition)
nmap gi <plug>(lsp-implementation)
nmap gf :CtrlPFunky<CR>
nmap gl <plug>(lsp-code-lens)
nnoremap gq :<C-u>LspStopServer<CR>

" Easymotion (inline motion only)
let g:EasyMotion_keys = 'aeniyopukhtscrldmbfvqxz'
let g:EasyMotion_smartcase = 1
let g:EasyMotion_do_shade = 0
let g:EasyMotion_startofline = 0
map l <Plug>(easymotion-sl)

" Edgemotion
map T <Plug>(edgemotion-j)
map R <Plug>(edgemotion-k)

" Sandwich
let g:sandwich_no_default_key_mappings = 1
map gs <Nop>
nmap gsa <Plug>(sandwich-add)
xmap gsa <Plug>(sandwich-add)
omap gsa <Plug>(sandwich-add)
nmap gsd <Plug>(sandwich-delete-auto)
xmap gsd <Plug>(sandwich-delete)
nmap gsr <Plug>(sandwich-replace-auto)
xmap gsr <Plug>(sandwich-replace)
