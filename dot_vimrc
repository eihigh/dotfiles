" ========================================
" プラグインのインストール
" ========================================

call plug#begin('~/.vim/plugged')

" カラースキーム
Plug 'eihigh/vim-aomi-grayscale'
Plug 'chriskempson/base16-vim'
Plug 'cocopon/iceberg.vim'

" モーション / オペレータ
Plug 'rhysd/clever-f.vim'
Plug 'hrsh7th/vim-searchx'
Plug 'haya14busa/vim-edgemotion'
Plug 'haya14busa/vim-asterisk'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'sgur/vim-textobj-parameter'

" テキスト編集
Plug 'tyru/caw.vim'
Plug 'machakann/vim-sandwich'
Plug 'eihigh/vim-lexiv'

" ファイラ / セレクタ
Plug 'mattn/vim-findroot'
Plug 'cocopon/vaffle.vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'yssl/QFEnter'

" パッシブ拡張
" Plug 'wellle/context.vim'
Plug 'obcat/vim-sclow'
Plug 'obcat/vim-hitspop'

" 言語
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'mattn/ctrlp-lsp'
Plug 'fatih/vim-go'
" TODO: obcat/vim-ref-godoc

" ウィンドウ
Plug '4513ECHO/vim-snipewin'

" 小回り
Plug 'vim-jp/vimdoc-ja'
Plug 'Shougo/junkfile.vim'

call plug#end()

" ========================================
" 標準のキーマップの上書き・調整（いくらあってもよいとされている）
" ========================================

" 移動
noremap <up>   gk
noremap <down> gj

" 検索ハイライト消去
nnoremap <silent> <esc> <cmd>nohlsearch<cr>

" インサート中移動で undo block を中断しない
inoremap <left>  <c-g>U<left>
inoremap <right> <c-g>U<right>

" yank 範囲
nnoremap Y y$

" Changelist
nnoremap <plug>(cgl)  <nop>
nnoremap           g; g;<plug>(cgl)
nnoremap           g, g,<plug>(cgl)
nnoremap <plug>(cgl); g;<plug>(cgl)
nnoremap <plug>(cgl), g,<plug>(cgl)

" Clever-f
noremap f <plug>(clever-f-f)
noremap F <plug>(clever-f-F)

" Asterisk
noremap *  <plug>(asterisk-z*)
noremap #  <plug>(asterisk-z#)
noremap g* <plug>(asterisk-gz*)
noremap g# <plug>(asterisk-gz#)

" Lexiv
inoremap <expr> " lexiv#quote_open('"')
inoremap <expr> ' lexiv#quote_open("'")
inoremap <expr> ` lexiv#backquote_open()
inoremap <expr> { lexiv#paren_open('{')
inoremap <expr> ( lexiv#paren_open('(')
inoremap <expr> [ lexiv#paren_open('[')
inoremap <expr> } lexiv#paren_close('}')
inoremap <expr> ) lexiv#paren_close(')')
inoremap <expr> ] lexiv#paren_close(']')

" Asyncomplete
inoremap <silent> <expr> <s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
inoremap <silent> <expr> <tab>   pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <silent> <expr> <cr>   (pumvisible() ? "\<c-y>" : "") .. lexiv#paren_expand()

" ========================================
" 標準にはない追加のキーマップ（少ないほどよいとされている）
" ========================================

" 保存ショートカット
nnoremap M <cmd>update<cr>

" t, T, m, ', ` は既定で1char食うので、潰してスパルタン環境で誤爆しても害が少ない

" ウィンドウ管理
let g:win_labels = split('ine,mhsfvwdcxzkyou', '.\zs')
nnoremap t  <cmd>call GotoWinByLabel()<cr>
nnoremap T  <cmd>call SwapWinByLabel()<cr>
nnoremap ta <cmd>above split<cr>
nnoremap tb <cmd>below split<cr>
nnoremap tr <cmd>rightb vsplit<cr>
nnoremap tl <cmd>lefta vsplit<cr>
nnoremap tt <c-w>p
nnoremap tp <c-w>p

" 主要コマンド
nnoremap mm <cmd>CtrlPMixed<cr>
nnoremap me <cmd>e %:h<cr>
nnoremap mt <cmd>call ReuseShellOrCreate()<cr>
nnoremap ms :<c-u>call VimGrepDir(findroot#find(), '')<left><left>
nnoremap mg :<c-u>vimgrep '' **<left><left><left><left>
nnoremap mr <cmd>CtrlPMRU<cr>
nnoremap ml <cmd>CtrlPBuffer<cr>
nnoremap mc <cmd>botright copen 18<cr>

" Sandwich
noremap  'a <plug>(sandwich-add)
nnoremap 'd <plug>(sandwich-delete-auto)
xnoremap 'd <plug>(sandwich-delete)
nnoremap 'r <plug>(sandwich-replace-auto)
xnoremap 'r <plug>(sandwich-replace)

" Edgemotion
noremap 'e <plug>(edgemotion-j)
noremap 'E <plug>(edgemotion-k)

" Searchx
nnoremap s <cmd>call searchx#start({ 'dir': 1 })<cr>
xnoremap s <cmd>call searchx#start({ 'dir': 1 })<cr>
nnoremap S <cmd>call searchx#start({ 'dir': 0 })<cr>
xnoremap S <cmd>call searchx#start({ 'dir': 0 })<cr>

" ターミナルからの脱出
tnoremap <esc><esc> <esc>
tnoremap <esc>n     <c-w>N
tnoremap <esc>p     <c-w>p
tnoremap <esc>h     <c-w>:hide \| wincmd p<cr>
tnoremap <esc>t     <c-w>:<c-u>call GotoWinByLabel()<cr>
tnoremap <esc>T     <c-w>:<c-u>call SwapWinByLabel()<cr>
tnoremap <esc>ta    <c-w>:<c-u>above new<cr>
tnoremap <esc>tb    <c-w>:<c-u>below new<cr>
tnoremap <esc>tr    <c-w>:<c-u>rightb vnew<cr>
tnoremap <esc>tl    <c-w>:<c-u>lefta vnew<cr>
tnoremap <esc>tt    <c-w>p
tnoremap <esc>tp    <c-w>p

" z. でカーソル中央固定
set scrolloff=2
noremap <expr> z. &scrolloff == 99 ? ':setlocal scrolloff=2<CR>' : 'zz:setlocal scrolloff=99<CR>'

" テーマ切り替え
nnoremap <f2> <cmd>call Night()<cr>
nnoremap <f3> <cmd>call Day()<cr>

" ========================================
" 本体機能の設定
" ========================================

" エンコード
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,latin1
set fileformats=unix,dos

" 検索
set hlsearch
set ignorecase
set incsearch
set smartcase

" テキスト編集
set backspace=eol,indent,start
set formatoptions+=mM
set matchpairs+=<:>,「:」,（:）,『:』,【:】,《:》,〈:〉,｛:｝,［:］,【:】,‘:’,“:”
set shiftwidth=3
set smartindent
set tabstop=3
" TODO: spell check

" 見た目
set display=lastline
set equalalways
set helplang=ja
set laststatus=2
set list
set listchars=tab:\ \ ,extends:<,trail:+
set nowrap
set number
set signcolumn=number
set termguicolors

" 挙動
set autochdir
set autoread
set tabpagemax=100
set ttimeoutlen=0
set splitright

" Abbreviation
abbrev ret return

" マウス
set mouse=n

" undo 履歴
if isdirectory(expand('~/.cache/vim'))
	set undofile
	set undodir=~/.cache/vim/
endif

" grepprg
if executable('rg')
	set grepprg=rg\ --vimgrep
	set grepformat=%f:%l:%c:%m
endif

" NORMAL/INSERT でカーソル形状を変更
if &term =~ 'xterm' || &term == 'win32'
	let &t_SI = "\e[5 q"
	let &t_EI = "\e[2 q"
else
	let &t_SI = "\<Esc>]50;CursorShape=1\x7"
	let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" ステータスラインをシュッとさせる
set statusline=\ [%{WinLabel()}]%=%m%{EncInfo()}\ %<%F

" Autocmd
augroup others
	autocmd!
	autocmd QuickFixCmdPost make,grep,grepadd,vimgrep botright copen 18
	autocmd WinClosed * wincmd p
	autocmd TabClosed * wincmd p
	autocmd VimResized * wincmd =
augroup END

" ========================================
" プラグイン機能の設定
" ========================================

" Searchx
let g:searchx = {}
let g:searchx.auto_accept = v:true
let g:searchx.scrolloff = &scrolloff
let g:searchx.scrolltime = 0
let g:searchx.nohlsearch = {}
let g:searchx.nohlsearch.jump = v:true
let g:searchx.markers = split(' HTSRMFGVXBDLCWZK', '.\zs')
function g:searchx.convert(input) abort
	if a:input !~# '\k'
		return '\V' .. a:input
	endif
	return a:input[0] .. substitute(a:input[1:], '\\\@<! ', '.\\{-}', 'g')
endfunction

" Sandwich
let g:sandwich_no_default_key_mappings = 1

" Clever-f
let g:clever_f_not_overwrites_standard_mappings = 1
let g:clever_f_across_no_line = 1
let g:clever_f_smart_case = 1
let g:clever_f_mark_char_color = 'Search'

" Lexiv
" デフォルトだと <cr> が補完確定のマッピングと
" 衝突するので、無効にする（fork 元ではできない）
let g:lexiv_no_default_key_mappings = 1

" LSP
let g:lsp_async_completion = 1
let g:lsp_diagnostics_highlights_delay = 100
let g:lsp_diagnostics_highlights_enabled = 1
let g:lsp_diagnostics_highlights_insert_mode_enabled = 1
let g:lsp_diagnostics_signs_enabled = 0
let g:lsp_diagnostics_virtual_text_align = "right"
let g:lsp_diagnostics_virtual_text_delay = 100
let g:lsp_diagnostics_virtual_text_enabled = 1
let g:lsp_document_code_action_signs_enabled = 0
let g:lsp_document_highlight_enabled = 0
let g:lsp_settings_enable_suggestions = 0

" vim-go
" LSPに寄せるのでキーマップ無効
let g:go_def_mapping_enabled = 0

" Vaffle
let g:vaffle_show_hidden_files = 1

" findroot
" 'findroot#find()' 関数目的で入れるので、発火はさせない
let g:findroot_mask = '__do_not_fire__'

" Hitspop
let g:hitspop_line = 'winbot'
let g:hitspop_column_mod = -1

" ========================================
" バッファローカル設定
" ========================================

augroup buflocal
	autocmd!
	autocmd User lsp_buffer_enabled call BufLocalLSP()
	autocmd FileType vaffle         call BufLocalVaffle()
	autocmd FileType go             call BufLocalGo()
	autocmd FileType qf             call BufLocalQF()
	autocmd FileType markdown       call BufLocalMarkdown()
	autocmd TerminalOpen * setlocal bufhidden=hide
augroup END

" vim-lsp
" ---------------------------------------
function! BufLocalLSP() abort
	setlocal omnifunc=lsp#complete
	if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

	nnoremap <buffer> gd <plug>(lsp-definition)
	nnoremap <buffer> gD <plug>(lsp-type-definition)
	nnoremap <buffer> 'L <plug>(lsp-previous-diagnostic)
	nnoremap <buffer> 'l <plug>(lsp-next-diagnostic)
	nnoremap <buffer> K  <plug>(lsp-hover)
	nnoremap <buffer> gc <plug>(lsp-rename)
	nnoremap <buffer> gq <cmd>LspStopServer<cr>

	" gofmt & goimports
	" autocmd! BufWritePre *.go call execute('LspDocumentFormatSync') | call execute('LspCodeActionSync source.organizeImports')
endfunction

" Vaffle
" ---------------------------------------
function! BufLocalVaffle() abort
	nnoremap <buffer> <left>  <plug>(vaffle-open-parent)
	nnoremap <buffer> <right> <plug>(vaffle-open-current)
endfunction

" Go
" ---------------------------------------
function! BufLocalGo() abort
	" Snippet にするか迷う
	abbrev <buffer> e_ err != nil
	abbrev <buffer> a_ append

	nnoremap <buffer> mTT <cmd>GoTest<cr>
	nnoremap <buffer> mTF <cmd>GoTestFunc<cr>
endfunction

" Quickfix
" ---------------------------------------
function! BufLocalQF() abort
	nnoremap <buffer> o <cmd>colder<cr>
	nnoremap <buffer> O <cmd>cnewer<cr>
endfunction

" Markdown
" ---------------------------------------
function! BufLocalMarkdown() abort
	setlocal wrap
endfunction

" ========================================
" 自作関数
" ========================================

" ステータスライン
" ---------------------------------------
function! EncInfo() abort
	return &fenc == "utf-8" ? "" : "["..&fenc.."]"
endfunction

function! WinLabel() abort
	return get(g:win_labels, winnr() - 1, '')
endfunction

" ウィンドウ管理
" ---------------------------------------
function! WinLabel2Id(label) abort
	let nr = index(g:win_labels, a:label) + 1
	return nr == 0 ? -1 : win_getid(nr)
endfunction

function! GotoWinByLabel() abort
	let id = WinLabel2Id(nr2char(getchar()))
	if id != -1
		call win_gotoid(id)
	endif
endfunction

function! SwapWinByLabel() abort
	let id = WinLabel2Id(nr2char(getchar()))
	if id != -1
		call snipewin#callback#swap(id)
	endif
endfunction

function! ReuseShellOrCreate() abort
	" 実行中で非表示のシェルがあれば復元
	let bufs = getbufinfo()->filter({i, b ->
				\ getbufvar(b.bufnr, '&buftype') == 'terminal' &&
				\ stridx(b.name, '!'..&shell) == 0 &&
				\ b.changed == 1 &&
				\ b.hidden == 1
				\ })

	if len(bufs) != 0
		exe 'b '..bufs[0].bufnr
		return
	endif

	terminal ++curwin ++open
endfunction

" ディレクトリ指定 vimgrep
" ---------------------------------------
function! VimGrepDir(dir, word) abort
	let esc = escape(a:word, '"')
	exe 'vimgrep "' .. esc .. '" ' .. fnameescape(a:dir) .. '/**'
endfunction

" 色の切り替え
" ---------------------------------------
function! Day() abort
	set background=light
	colorscheme aomi-grayscale
	hi link SclowSbar StatusLine
	hi link EndOfBuffer Ignore
endfunction

function! Night() abort
	set background=dark
	colorscheme aomi-grayscale
	hi Normal guibg=NONE
	hi link SclowSbar StatusLine
	hi link EndOfBuffer Ignore
endfunction

" 色の設定はプラグイン読み込み後に行う
call Night()
